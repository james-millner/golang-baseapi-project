package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
	"github.com/kelseyhightower/envconfig"
	goji "goji.io"
	"goji.io/pat"
)

//DB Struct for holding GormDB instance.
type DB struct {
	db *gorm.DB
}

//Response Struct
type Response struct {
	Message string `json:"message"`
}

//Config struct for holding environment variables.
type Config struct {
	HTTPPort   int    `default:"8092"`
	Debug      bool   `default:"false"`
	DBDialect  string `required:"false"`
	DBHost     string `required:"true" default:"localhost"`
	DBPort     int    `required:"true" default:"33062"`
	DBUser     string `required:"true" default:"root"`
	DBPassword string `required:"true" default:"root"`
	DBDatabase string `required:"true" default:"gobase"`
	DBDsn      string
}

func main() {

	var env Config
	err := envconfig.Process("api", &env)
	if err != nil {
		log.Fatal(err.Error())
	}

	gormDB, dbErr := openDBConnection(&env)
	if dbErr != nil {
		log.Fatalf("failed to establish DB Connection: %v: ", err)
	}

	db := &DB{
		db: gormDB,
	}

	log.Println("Listening on: ", env.HTTPPort)

	srv := &http.Server{
		Addr:    ":" + strconv.Itoa(env.HTTPPort),
		Handler: handlersMethod(db),
	}

	go func() {
		// Graceful shutdown
		sigquit := make(chan os.Signal, 1)
		signal.Notify(sigquit, os.Interrupt, os.Kill)

		sig := <-sigquit
		log.Printf("caught sig: %+v", sig)
		log.Printf("Gracefully shutting down server...")

		ctx, cancel := context.WithTimeout(context.Background(), 50*time.Second)
		defer cancel()

		if err := srv.Shutdown(ctx); err != nil {
			log.Printf("Unable to shut down server: %v", err)
		} else {
			log.Println("Server stopped")
		}
	}()

	if err := srv.ListenAndServe(); err != http.ErrServerClosed {
		log.Printf("%v", err)
	} else {
		log.Printf("HTTP Server shutdown!")
	}
}

func handlersMethod(db *DB) *goji.Mux {
	router := goji.NewMux()

	router.HandleFunc(pat.Get("/healthz"), Health())
	return router
}

func openDBConnection(config *Config) (*gorm.DB, error) {
	var gormDB *gorm.DB
	var err error

	log.Println("Opening DB connection...")

	switch config.DBDialect {
	case "mysql":
		dsn := fmt.Sprintf(
			"%s:%s@tcp(%s:%d)/%s?charset=utf8&parseTime=True",
			config.DBUser,
			config.DBPassword,
			config.DBHost,
			config.DBPort,
			config.DBDatabase,
		)

		log.Println(dsn)

		db, err := sql.Open("mysql", dsn)
		if err != nil {
			log.Fatalf("Failed to load mysql driver: %v", err)
		}

		gormDB, err = gorm.Open("mysql", db)

		if err != nil {
			return nil, fmt.Errorf("Failed to open connection to database: %v", err)
		}

	default:
		gormDB, err = gorm.Open("sqlite3", filepath.Join(os.TempDir(), "gorm.db"))
		if err != nil {
			return nil, fmt.Errorf("Failed to open connection to database: %v", err)
		} else {
			log.Println("SQLLite configured.")
		}
	}

	// gormDB.AutoMigrate(
	// //TODO Insert Structs here to be autogenerated by GORM.
	// )

	return gormDB, err
}

// New creates a new instance of DB and returns a reference to it
func New(db *gorm.DB) *DB {
	return &DB{
		db: db,
	}
}

//Health endpoint
func Health() func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		enc := json.NewEncoder(w)
		enc.SetEscapeHTML(false)

		resp := &Response{
			Message: "OK",
		}

		enc.Encode(resp)
	}
}
